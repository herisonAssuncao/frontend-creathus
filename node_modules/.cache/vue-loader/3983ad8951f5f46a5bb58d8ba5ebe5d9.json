{"remainingRequest":"/home/herison/projetos/vue_crud_bootstrap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/herison/projetos/vue_crud_bootstrap/src/views/CallRestApi.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/herison/projetos/vue_crud_bootstrap/src/views/CallRestApi.vue","mtime":1615383730121},{"path":"/home/herison/projetos/vue_crud_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/herison/projetos/vue_crud_bootstrap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/herison/projetos/vue_crud_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/herison/projetos/vue_crud_bootstrap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGVtcGxveWVlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvZW1wbG95ZWVzZXJ2aWNlJwppbXBvcnQgTG9hZGluZyBmcm9tICd2dWUtbG9hZGluZy1vdmVybGF5JwppbXBvcnQgJ3Z1ZS1sb2FkaW5nLW92ZXJsYXkvZGlzdC92dWUtbG9hZGluZy5jc3MnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ2NhbGxfcmVzdF9hcGknLAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgbGlzdEVtcGxveWVlOiBbXSwKICAgICAgaXNMb2FkaW5nOiBmYWxzZQogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgTG9hZGluZwogIH0sCiAgY3JlYXRlZCAoKSB7CiAgICB0aGlzLmxvYWRFbXBsb3llZXMoKQogIH0sCiAgbWV0aG9kczogewogICAgbG9hZEVtcGxveWVlcyAoKSB7CiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZQogICAgICBlbXBsb3llZVNlcnZpY2UuZ2V0TGlzdEVtcGxveWVlcygpLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgdGhpcy5saXN0RW1wbG95ZWUgPSByZXNwb25zZS5kYXRhCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlCiAgICAgICAgfSwgNTAwKQogICAgICB9KQogICAgfQogIH0KfQo="},{"version":3,"sources":["CallRestApi.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CallRestApi.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <h3>Call REST API</h3>\n    <div>\n      <table class=\"table table-bordered\">\n        <tr>\n          <td>Employee ID</td>\n          <td>Employee Name</td>\n          <td>Age</td>\n          <td>Salary</td>\n        </tr>\n        <tr :key=\"employee.id\" v-for=\"employee in listEmployee\">\n          <td>{{employee.id}}</td>\n          <td>{{employee.employee_name}}</td>\n          <td>{{employee.employee_age}}</td>\n          <td>{{employee.employee_salary}}</td>\n        </tr>\n      </table>\n      <loading :active.sync=\"isLoading\"\n        :can-cancel=\"true\"\n        :on-cancel=\"onCancel\"\n        :is-full-page=\"fullPage\"></loading>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { employeeService } from '../service/employeeservice'\nimport Loading from 'vue-loading-overlay'\nimport 'vue-loading-overlay/dist/vue-loading.css'\n\nexport default {\n  name: 'call_rest_api',\n  data () {\n    return {\n      listEmployee: [],\n      isLoading: false\n    }\n  },\n  components: {\n    Loading\n  },\n  created () {\n    this.loadEmployees()\n  },\n  methods: {\n    loadEmployees () {\n      this.isLoading = true\n      employeeService.getListEmployees().then((response) => {\n        this.listEmployee = response.data\n        setTimeout(() => {\n          this.isLoading = false\n        }, 500)\n      })\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n"]}]}